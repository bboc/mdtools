mdtools 2.x:
	see ./proposal-for-mdtools-2.0.md for details (mostly outdated now...)
	Order of user stories is relevant for handling dependencies!
	This update will most likely break the deckset renderer and the reveal.js renderer pretty thoroughly.
		
	- section links could be lowercased before rendering???
	sync glossary with crowdin:
		https://realpython.com/api-integration-in-python/ 
		look at realpython 1/2 pdf
		use rest3client to abstract crowdin API https://pypi.org/project/rest3client/#description
		- get api token from crowdin.yaml
		- ensure glossary in crowdin is set up do distinguish between the followingentry types:
			- patterns
			- previous pattern names
			- pattern category
			- "synced" glossary entries
			- other stuff (probably best that this category has no markers)
		- sync patterns
			- ensure all current patterns are present, add those that are missing
			- ensure all everything else marked as pattern is now marked as obsolete
		- sync pattern category names
		- sync glossary entries 
			- ensure everythinh in glossary.yaml is present, update to the latest description (mark those that are no longer in glossary.yaml as obsolete)
			- test by copying the current glossary to a new project
			- after running once, clean glossary 
	Update Language versions to mdtools 2.x:
		- update German version
		- update Hebrew version??
		- update Dutch version
		- update swedish version @done
	Update documentation:
		- move all info from ./slides/slides.md to the documentation tree
		- list all macros
		- list markup (including escapung/unescaping \{\{ \}\}
		- list all filters for the renderer
		- list all glossary renderers (for items and for the full glossary is described) 
		- list relevant config variables are described
		- remove obsolete documents
		- add a page for each renderer
		- set up a separate example project for deckset renderer 
	Index document can be empty:
		Asa an author I want to have a directory without an index document, so that I have more flexibility for arranging content into different editions. 
		- what about headline levels? Trade-off might be that those would need to be manually aligned?
	Support all editions from one structure:
		Build supporter editon and "normal" editions from the same structure, use a config variable cfg.edition (default: '')
		If information about inclusion and exclusion is stored in structure (and not in the content file itself) the info is visible in one place. Keeping this info in a separate array, not in tags, allows for a simpler design
		Variant A:
			add tags to each section: exclude:editon-A|edition-B include:editon-A|edition-B
			add as literal to section
				id: foobart
				exclude:editon-A|edition-B 
				include:editon-A|edition-B
				sections: â€¦
	Port revealjs renderer to mdtools 2.0:
		At the moment, there are 2 distinct functions, both should be preserved.
			render source as deckset
			convert markdown to deckset
		- remove init in slides, obsolete commands, index and build_web_content
		- add new command stub for converting (also to setup.py)
		- move files to new location
		- find out how both functions interact with each other and update todo list
		- test realjs converter with output of deckset renderer 
		- then convert revealjs renderer
	Fix testsuite:
		- ensure that all existing tests are running
		- check that all main features are not only explained but also used in the documentation so that the documentation serves as a test suite
	MVP: Responsive Pattern Map:
		Macro Support: @estimate(30min)
			- variables:
					green: #FF0000
				{{name:$green}} or {{name:var(green)}}
			- test that variable-name can be correctly substituted in macros and templates (the cfg-object's key is "variable_name")
		Plugin and Macro Support: @estimate(8h)
			As developer I want a simple plugin API that allows for defining new macros, and access to the preprocessor for preparing required data structures so that I can easily add new behaviour with just a few lines of code
			- configure plugins globally and per document type
			- plugins used for a specific document can be configured globally or in the preset 
			- override and extend plugin list in document type
			- define parameters per plugin
			- add preprocessor plugins
			- refactor S3-specific macros to use plugin architecture
		Plugin for Clickable Pattern Map: @estimate(4h)
			As reader of the practical guide, I want a responsive patter map so that I can navigate effortlessly between patterns.
			- add plugin to create html for pattern map structure
			- add remplate and JS for pattern map
			- add css for pattern map
			- add texts to localization.pot if required 
		Release the practical guide: @estimate(2h)
			
	Redirections: @estimate(6h)
		As an author, I redirections on my website so that I can re-arrange my content and change titles as I see fit.
		can simply be released when ready
		Also I might want to move my site to a new github page and set up a 404 page that redirects all requests?
		https://stackoverflow.com/questions/503093/how-do-i-redirect-to-another-webpage
		- create first version of redirections.yaml file from structure.yaml
		- add template for redirection files (including requred JS)
		- add configurable build step for generating redirection files from redirections.yaml
		- add search
	Link to Node:
		As a reader I want links to content nodes in the PDF, the EPUB and the all-in-one webpage, so that I can clock on references in the text, and especially in the list of patterns.
	Convert Layout to bootstrap:
		- add bootstrap 
		- setup smartmenus to work with bootstrap
		Links:
			https://medium.com/better-programming/an-introduction-to-using-jekyll-with-bootstrap-4-6f2433afeda9
				good explanation how to include bootstrap and inclue a menu (which is not layered, so other code would be required for that)
			https://getbootstrap.com - the bootstrap site
			https://inspirationalpixels.com/creating-a-responsive-menu-with-html-css-jquery/
				explanation of html/css for responsive menus (nav element and media queries)
			https://webdesign.tutsplus.com/articles/best-practices-for-responsive-dropdown-menus--cms-35212
				best practices
			https://github.com/dpstrange/jekyll-bootstrap
			bootstrap temlate for jekyll
	Sometimes:
		MVP: App with GUI:
			As author I want a simple app that converts my stuff to so that I don't have to mess with installation and teh commandline.
			(people would still require to install MacTex, Jekyll, Pandoc etc., though)
			- build a gui (from on I already have probably)
				- select project file
				- select a preset
				-- run | quit
				- log level
				- log output
			- test if pandoc, latexmk or multimarkdown is installed (is mmd necessary at all??)
			- 
			- execute the build
		MVP: Better Document Structure:
			Better Document Structure: @estimate(6h)
				As an author, I want to use identical file names in different folders so that I don't have to use weird workarounds, e.g. when each part starts with an 'overview' .
				- error is raised if both exist at the same time
				- website is published in folders now
				- all indexes and menus are still working
				- update redirections as necessary
				Release: @estimate(2h)
					this release might require moving some files in Crowdin!!! @priority
					- backup all files in crowdin!
					- manually move files in crowdin!!!
					- release
			
		Add separate template command: @estimate(2h)
			cmd_template is working with new config format 
			requires some thought, because of new config format, running it with full config is a lot of hassle,
			manually handing in translations and variables is also not right for some usecases.
			Therefore it makes sense to wait if this is needed at all, and if so, in what way
		Better glossary and links support for Latex (and other formats): @estimate(4h)
			Make handling glossary and section links more flexible to enable output in PDF
			most of the code is already there, requires some tweaking though.
			- add markdown rendering for emphasis and strong in glossary text
			- render glossary terms as footnotes for LaTeX
			- render section links as clickable links in LaTeX (like in the index)
			- render section links as clickable links in ePub
			Basic Footnoote Renderer for Ebooks:
				replace glossary link with a footnote marker for that glossary term
			Glossary for Epub:
				glossary can be footnotes, or an epub glossary, but epub glossaries don't seem to be universally supported:
					http://www.idpf.org/epub/dict/#sec-1
					https://ebooks.stackexchange.com/questions/2344/epub-kindle-file-glossary-and-dictionary-selection
					https://support.apple.com/kb/PH2753?locale=en_US&viewlocale=en_US
					https://pressbooks.com/blog/our-gifts-to-you-this-holiday-a-new-glossary-feature-customizable-section-labels-and-more/
					https://www.wikihow.com/Write-a-Glossary
			Glossary for PDF:
			Try footnotes, one footnote per glossary entry, or underlining all glossary entries with LaTeX markup (or both)
					dotted underline https://tex.stackexchange.com/questions/27258/how-do-i-write-underline-text-but-with-a-dotted-line
					underlines with ulem: http://texdoc.net/texmf-dist/doc/generic/ulem/ulem.pdf
				undeline in Latex: https://alexwlchan.net/2017/10/latex-underlines/
			- try https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#glossaries
Done:
	MVP 1: New Structure, Menu and CSF: @done
		After the first milestone, the Common Sense Framework can be integrated into the practical guide.
		This release affects crowdin! @priority
		New Project Structure: @estimate(2d) @done
			As author, I want a more flexible and consistent document structure so that I am not limited to a fixed three-part structure (Introduction, Chapters, Appendix)
			Constraint: each section still requires a unique id (filename name) as we don't have folders in the first release @priority
			Can't be released without a new menu for the website, because new content will not be visible @priority
		Responsive Website Menu: @done
			As a website visitor I want a responsive menu that gives me access to all content, so that I can find what I want.
		Release of the Practical Guide: @done
			This release removes dependency of translation to structure.yaml.
			As soon as all new templates are translated, other language versions can be updated, too, the CSF will then be added as an update as soon as it has been translated.
	Linkable Glossary: @done
		Glossary items should instead be rendered as dd tags within a dl (definition list) and they should have anchor links so that one can link such as https://patterns.sociocracy30.org/glossary.html#objection which isn't possible now.
	Show/hide parts of content files dependent on format, preset and edition: @done
		As an author I want to be able to show parts of a file only for specific formats, editions or presets, so my project is easier to maintain.
	Simplified Structure (won't do): @done
		Check that a simplified format for structure (like used in the docs) is still possible
		
		It doesn't appear to be possible. Converting a project to the new structure is simple and well worth the effort.
	Better User Experience for Website: @done
			- add smartmenu keyboard navigation addon @done
			- add keyboard navigation for next page @done
	Update documentation: @done
		Showcase features and document usage of mdtools in a documentation that is created with mdtools
		â€¦
		- copy all necessary stuff (including the makefile) from S3 repo @done
		- setup project yaml from S3 practical guide @done
		- convert filesystem structure @done
		- copy all files from docs folder @done
		- conver structure.yaml @done
		- integrate makefile @done
		- convert all templates @done
		- convert .tex @done
		- convert project.yaml @done
		- convert _config.yml @done
		- convert epub header @done
		- ensure everything inside content/website is updated @done
		- @done
		- attempt quickfix of deckset renderer jsut for fun @done
		- move documentation from /doc-src/en to .content @done
	Port Deckset renderer to mdtools 2.0: @done

processing slides:
	set up basic test for all important formats (gold master): @1h
		make sure all relevant features are covered
		- speaker notes
		- glossary renderer and page breaks (at least 3 glossary entries)
		- inline images
		- section numbering
		- image captions
	reveal.js renderer: @later
		- section links [Governance Facilitator](section:governance-facilitator) : replace with emphasis on title
		- glossary overlays  [Driver](glossary:driver): add html overlay
		- add support for right aligned images
		- have chapter links link to slide https://github.com/hakimel/reveal.js/#internal-links
		- revealjs: add html overlay for glossary terms
		Style/Theming:
			see https://github.com/hakimel/reveal.js/blob/master/css/theme/README.md
			- paragraphs are centered, should be aligned right (.reveal .slides { text-align: center;} 
			- some slides are truncated (affects text-only slides also). Those slides are displayed completely when reducing the screen width
	
mdimg:
	- (optional) parse non-language assets?
	- as of now, using one language only no longer works, this needs to be remedied @priority(high)
	Multi-language Support:
		- document structure in readme or help
			Image repositories structure:
				Assumption: documents may reference images from all languages
				there needs to be a common root for for images "img", which is symlinked into each folder that makes use of the images. Otherwise folders become messy quite soon. 
				- Maybe that root folder can be called something else to cater for something else? If the code is clever, the root folder's name is not important, and image references will be translated accordingly. Then we could also use mdimg to rename the root folder form "img" to, say, "assets"
				/img/
					/de/...
					/en/â€¦
				/slides/
					/de/â€¦
					/en/â€¦