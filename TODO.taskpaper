mdtools 2.0:
	User Stories and acceptace criteria for mdtools 2.0. 
	see ./proposal-for-mdtools-2.0.md for details
	Order of user stories is relevant for handling dependencies!
	This update will most likely break the deckset renderer and the reveal.js renderer pretty thoroughly.
	
	Milestone 1: New Structure and Menu:
		After the first milestone, the Common Sense Framework can be integrated into the practical guide.
		This release affects crowdin! @priority
		Preparation:
			- backup all files from crowdin
			- deactivate revealjs and deckset formats @done
			- deactivate crowdin upload
		New Project Structure: @estimate(2d)
			As author, I want a more flexible and consistent document structure so that I am not limited to a fixed three-part structure (Introduction, Chapters, Appendix)
			Constraint: each section still requires a unique id (filename name) as we don't have folders in the first release @priority
			Can't be released without a new menu for the website, because new content will not be visible @priority
			- disable revealjs and deckset renderers @done
			- create new structure.yaml (which remains in the content folder because it is dependent on the content structure) @done
			- errors in structure.yaml and in the content structure are reported properly @done
			- patterns and pattern group are identified via tags in structure.yaml @done
			- document titles are read from file @done
			- decide: separate builder and renderer?? @done
			jekyll builder uses new format: @estimate(2h)
				- navigation in jekyll is still working (prev/next/up) @done
				- indexes with summaries are written to all pattern group pages, to introduction and to appendix @done
				- obsolete Templates are removed: @done
				- glossary is created @done
				- pattern-index.md with all patterns and summaries is written @done
				- all content from concepts and principles is moved to content tree @done
				- main index page is written @done
				- main index page uses plain index format @done
				- output is compared in detail once more 
				- section links are still working
			one-page html:
				- fix headline indentation
					- then reactivate glossary tooltips!!!
				- show glossary tooltips @done
				- markdown processor has access to structure and config @done
				- index supports style @done
				- add pattern index @done
				- move glossary item replacement to macro @done
			pdf ebook:
				- glossary links should be removed @done
				- glossary has duplicate header
				- header indentation is messed up
			epub ebook:
				- ???
				- replace glossary links properly:
			all-in-one html:
			- check that a simplified format for structure (like used in the docs) is still possible
			Clean up Code (after the practical guide has been committed to branch!!):
				- todo: default template mode should be copy????
				- part, chapter and section is consistently used in throughout the entire codebase (or not at all...)
				- all obsolete code is removed 
				- access to undefined config element produces a nice error
					This might take longer, because to display full path each content object needs access to its parent (FFS!)
				simple unified glossary code: @estimate(2h) @done
					all code that processes glossary items should be located in glossary.py or in macro package
					- markdown processor @done
					- glossary processor @done
					- macros @done
					- glossary.py @done
		Macro Support: @estimate(30min)
			- macros processing is consolidated into one markdown filter that takes plugins: @done
				1. parse string for {{macro}} 
				2. parse  macro for {{name:literal,$variable.something}}
				3. select plugin from name
				4. return substituted text (or full macro text if no macro is found
				??macro can be output-aware, with different output per document type
			- what about <!-- macros --> are these relevant? @done
			- variables:
					green: #FF0000
				{{name:$green}} or {{name:var(green)}}
		Python 3: @done
			As soon as everything is working again, or sooner, because looking up stuff for python 2 is a mess.
			Test who difficult this would get:
				- install a venv @done
				- install dependencies @done
				- run and see what happens @done
			- Port to Python 3 @done
			- make sure install documentation is complete (see Github Issue for details) @done
		Responsive Website Menu: @estimate(4h)
			As a website visitor I want a responsive menu that gives me access to all content, so that I can find what I want.
			- add html template for menu (and if necessary add js to body)
			- test menu with static content
			- add css for menu responsive menu
			- create menu structure from structure yaml
			- add tags for excluding items from menu
			Links:
				https://www.smartmenus.org/download/ on github: https://github.com/vadikom/smartmenus
				seems to be the first thing I should try (use Complete navbar .sm-clean)
				https://stackoverflow.com/questions/18023493/bootstrap-dropdown-sub-menu-missing
				nested menu with bootstrap 4 (code and explanation)
				https://medium.com/better-programming/an-introduction-to-using-jekyll-with-bootstrap-4-6f2433afeda9
					good explanation how to include bootstrap and inclue a menu (which is not layered, so other code would be required for that)
				https://getbootstrap.com - the bootstrap site
				https://inspirationalpixels.com/creating-a-responsive-menu-with-html-css-jquery/
					explanation of html/css for responsive menus (nav element and media queries)
				https://webdesign.tutsplus.com/articles/best-practices-for-responsive-dropdown-menus--cms-35212
					best practices
				https://github.com/dpstrange/jekyll-bootstrap
				bootstrap temlate for jekyll
				
		Configuration as Code: @done
			As author I want a simple way to configure the output for various formats so that I it is easy to set up new output formats and I don't have to learn about makefiles or shell scripts.
			- read document presets from project.yaml instead of the commandline @done
			- commandline input takes preset as parameter @done
			- global variables in project.yaml can be overridden in individual presets @done
			
		Release of the Practical Guide: @estimate(4h)
			This release removes dependency of translation to structure.yaml.
			As soon as all new templates are translated, other language versions can be updated, too, the CSF will then be added as an update as soon as it has been translated.
			This release affects crowdin! @priority
			
			- publish the English version of the practical guide with this version of mdtools
			- integrate the Common Sense Framework
			- update French version
			- update German version
			- update Hebrew version??
			- update Dutch version
			
	Milestone 2: Responsive Pattern Map:
		Plugin and Macro Support: @estimate(8h)
			As developer I want a simple plugin API that allows for defining new macros, and access to the preprocessor for preparing required data structures so that I can easily add new behaviour with just a few lines of code
			- configure plugins globally and per document type
			- plugins used for a specific document can be configured globally or in the preset 
			- override and extend plugin list in document type
			- define parameters per plugin
			- add preprocessor plugins
			- refactor S3-specific macros to use plugin architecture
		Plugin for Clickable Pattern Map: @estimate(4h)
			As reader of the practical guide, I want a responsive patter map so that I can navigate effortlessly between patterns.
			- add plugin to create html for pattern map structure
			- add remplate and JS for pattern map
			- add css for pattern map
			- add texts to localization.pot if required 
		Release the practical guide: @estimate(2h)
			this release requires moving many files in Crowdin by hand!!! @priority
			Other languages can be updated as soon as the new templates (and updates to localization.pot) is translated
			- ❗️backup all files in crowdin!
			- manually move files in crowdin
			- reactivate and dry-run crowdin-upload
			- publish the English version of the practical guide with this version of mdtools
			- update French version
			- update German version
			- update Hebrew version??
			- update Dutch version
	Redirections: @estimate(6h)
		As an author, I redirections on my website so that I can re-arrange my content and change titles as I see fit.
		can simply be released when ready
		- create first version of redirections.yaml file from structure.yaml
		- add template for redirection files (including requred JS)
		- add configurable build step for generating redirection files from redirections.yaml
	Linkable Glossary:
		maybe, see github issue
		- update renderer
		- nice CSS
	Milestone 4: Better Document Structure:
		Better Document Structure: @estimate(6h)
			As an author, I want to use identical file names in different folders so that I don't have to use weird workarounds, e.g. when each part starts with an 'overview' .
			- part and chapter index are read from index document inside folder or from document outside the folder @done
			- error is raised if both exist at the same time
			- website is published in folders now
			- all indexes and menus are still working
			- update redirections as necessary
			
		Release: @estimate(2h)
			this release might require moving some files in Crowdin!!! @priority
			- backup all files in crowdin!
			- manually move files in crowdin!!!
			- release
		
	Sometimes:
			Add separate template command: @estimate(2h)
				cmd_template is working with new config format 
				requires some thought, because of new config format, running it with full config is a lot of hassle,
				manually handing in translations and variables is also not right for some usecases.
				Therefore it makes sense to wait if this is needed at all, and if so, in what way
		- fix deckset renderer
		- fix reveal.js renderer
		- update tests
		- update documentation
		- go through old TODOs and see what is still relevant 
Old ToDo list:
	- check if anything below here is relevant for mdtools 2.0
	
mdslides:
	- publish on PyPI (https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your-package-on-pypi/)
	- jekyll renderer expects intro and appendix, is that a problem?
	✔ ebooks: strip deckset image commands, but preserve other captions @done (18-09-25 08:20)
	glossary and section links:
		Make handling glossary and section links more flexible to enable output in PDF
		- refactor from templates to objects 
		- add markdown rendering for emphasis and strong
		- render glossary terms as footnotes for LaTeX
		- render section links as clickable links in LaTeX (like in the index)
		- rename link title in pdf from "section" to "pattern"
		- render section links as clickable links in ePub
		- fix all other output formats for glossary and section links
		Basic Footnoote Renderer for Ebooks:
			replace glossary link with a footnote marker for that glossary term
		Glossary for Epub: 
			glossary can be footnotes, or an epub glossary, but epub glossaries don't seem to be universally supported:
				http://www.idpf.org/epub/dict/#sec-1
				https://ebooks.stackexchange.com/questions/2344/epub-kindle-file-glossary-and-dictionary-selection
				https://support.apple.com/kb/PH2753?locale=en_US&viewlocale=en_US
				https://pressbooks.com/blog/our-gifts-to-you-this-holiday-a-new-glossary-feature-customizable-section-labels-and-more/
				https://www.wikihow.com/Write-a-Glossary
		Glossary for PDF:
		Try footnotes, one footnote per glossary entry, or underlining all glossary entries with LaTeX markup (or both)
				dotted underline https://tex.stackexchange.com/questions/27258/how-do-i-write-underline-text-but-with-a-dotted-line
				underlines with ulem: http://texdoc.net/texmf-dist/doc/generic/ulem/ulem.pdf
			undeline in Latex: https://alexwlchan.net/2017/10/latex-underlines/
		- try https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#glossaries
	
	set up basic test for all important formats (gold master): @1h
		make sure all relevant features are covered
		- speaker notes
		- glossary renderer and page breaks (at least 3 glossary entries)
		- inline images
		- section numbering
		- image captions
	section compiler:
		- refactor SectionCompiler._append_section() to use mardown processor
	general refactoring:
		- remove the need for make-conf: all that should be in config.yaml
		- rename Content() and 'content' to structure
		- convert convert_file_for_web() to use MarkdownProcessor()
		- make config, glossary, structure and translations available to the pipelines @30min
		-  use constant (or config) in remove_breaks_and_conts() @15min
		- later: add CHAPTER_NUMBER, CHAPTER_INDEX_FILENAME, CHAPTER_INDEX_IMAGE, CHAPTER_TITLE_IMAGE should have default values that can be overridden in config.yaml  @later @estimate(1h)
		- class names and code layout can be improved @estimate(30min)
	aligning the metaphor:
		- refactor everything to use chapter and section instead of group and pattern!
		index keys are messed up: 
			- path for groups should not end in .md, but needs another way so crowdin does not pick it up
			- all keys should use constants
	deckset-renderer:
		empty
	reveal.js renderer: @later
		- section links [Governance Facilitator](section:governance-facilitator) : replace with emphasis on title
		- refactor revealjs.writer to use markdown processor (after basic tests are in place) @1h
		- glossary overlays  [Driver](glossary:driver): add html overlay
		- add support for right aligned images
		- have chapter links link to slide https://github.com/hakimel/reveal.js/#internal-links
		- revealjs: add html overlay for glossary terms
		Style/Theming:
			see https://github.com/hakimel/reveal.js/blob/master/css/theme/README.md
			- paragraphs are centered, should be aligned right (.reveal .slides { text-align: center;} 
			- some slides are truncated (affects text-only slides also). Those slides are displayed completely when reducing the screen width
	ebook (pdf) renderer:
	
	epub renderer:			
		- add section links so they link to the section headers
	jekyll builder MVP:
		- add file with translated terms for: next, previous, index, groups, intro, appendix etc.
mdimg:
	- (optional) parse non-language assets?
	- as of now, using one language only no longer works, this needs to be remedied @priority(high)
	Multi-language Support:
		- document structure in readme or help
			Image repositories structure:
				Assumption: documents may reference images from all languages
				there needs to be a common root for for images "img", which is symlinked into each folder that makes use of the images. Otherwise folders become messy quite soon. 
				- Maybe that root folder can be called something else to cater for something else? If the code is clever, the root folder's name is not important, and image references will be translated accordingly. Then we could also use mdimg to rename the root folder form "img" to, say, "assets"
				/img/
					/de/...
					/en/…
				/slides/
					/de/…
					/en/…
documentation/showcase:
	Showcase features and document usage of mdtools in a documentation that is created with mdtools
	✔ set up basic page structure @done (18-08-13 13:42)
	✔ make reveal.js slides @done (18-08-13 15:15)
		✔ integrate reveal.js templates @done (18-08-13 15:15)
	✔ link to slides.html in documentation @done (18-08-13 22:53)
	✔ set up jekyll site @done (18-08-13 18:16)
	✔ set up skeleton dir @done (18-08-13 15:15)
	✔ set up templates and styles @done (18-08-13 15:15)
	✔ set up github page (decide on CNAME!!!) @done (18-08-14 13:14)
	✔ find a way to escape markup so that documentation can contain things like {{define:thing}} and [Thing](glossary:thing) @done (18-08-13 18:16)
		✔ test if backticks work: `[[`deinfe:thing``]]`` @done (18-08-13 18:16)
